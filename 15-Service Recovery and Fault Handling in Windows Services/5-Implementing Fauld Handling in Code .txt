  4. Implementing Fault Handling in Code
4. Implementing Fault Handling in Code
To improve service resilience, implement error detection use try .. catch, logging, and handling within your service code.

Example Code with Fault Handling
using System;
using System.IO;
using System.ServiceProcess;
using System.Threading;

namespace FaultHandlingService
{
    public partial class MyCustomService : ServiceBase
    {
        private string logFilePath = @"C:\ServiceLogs\RecoveryLog.txt";

        public MyCustomService()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            LogEvent("Service Started");

            // Start a background task with fault handling
            Thread workerThread = new Thread(WorkerTask);
            workerThread.Start();
        }

        protected override void OnStop()
        {
            LogEvent("Service Stopped");
        }

        private void WorkerTask()
        {
            try
            {
                // Simulate work
                while (true)
                {
                    LogEvent("Service is running...");
                    Thread.Sleep(5000);

                    // Simulate a failure
                    throw new Exception("Simulated error for testing recovery.");
                }
            }
            catch (Exception ex)
            {
                LogEvent($"Error: {ex.Message}");
                // Exit the process to simulate failure
                Environment.Exit(1);
            }
        }

        private void LogEvent(string message)
        {
            string logMessage = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}";
            File.AppendAllText(logFilePath, logMessage + Environment.NewLine);
        }

        public static void Main()
        {
            ServiceBase.Run(new MyCustomService());
        }
    }
}

Code Explanation:
Fault Handling:
Exceptions are caught and logged.
If a critical error occurs, Environment.Exit(1) terminates the service to trigger recovery.
Logging:
Events are logged to a file for debugging and troubleshooting.
Simulated Failure:
An exception is intentionally thrown to demonstrate recovery behavior.